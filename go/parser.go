/*
**Goâ€™nun `go/parser` paketini** detaylÄ±ca anlatacaÄŸÄ±m.

---

# ğŸ“Œ `go/parser` Paketi Nedir?

`go/parser`, Go kaynak kodunu **parse** (Ã§Ã¶zÃ¼mleme) ederek **AST (Abstract Syntax Tree â€“ Soyut SÃ¶zdizim AÄŸacÄ±)** Ã¼retmeye yarar.

Bu paket, **Go compiler**â€™Ä±n temel bileÅŸenlerinden biridir ve genellikle:

* Kod analizi
* Statik analiz araÃ§larÄ± (Ã¶r. `golint`)
* Kod dÃ¶nÃ¼ÅŸtÃ¼rme (refactoring)
* Go dokÃ¼mantasyon araÃ§larÄ± (`go doc`)

gibi yerlerde kullanÄ±lÄ±r.

---

# ğŸ“‚ Paket Ä°Ã§i Ã–nemli YapÄ±lar & Fonksiyonlar

### ğŸ”¹ 1. `parser.ParseExpr`

* Tek bir Go ifadesini (expression) parse eder.
* Geriye `ast.Expr` dÃ¶ner.
*/
``go
package main

import (
	"fmt"
	"go/parser"
	"go/token"
)

func main() {
	expr, err := parser.ParseExpr("a + b*3")
	if err != nil {
		panic(err)
	}
	fmt.Printf("%#v\n", expr) // AST dÃ¼ÄŸÃ¼mÃ¼ yazdÄ±rÄ±r
}
``
/*
---

### ğŸ”¹ 2. `parser.ParseFile`

* Bir Go dosyasÄ±nÄ± parse eder.
* Geriye `*ast.File` dÃ¶ner.
*/
``go
package main

import (
	"fmt"
	"go/parser"
	"go/token"
)

func main() {
	src :=package main

import "fmt"

func main() {
    fmt.Println("Merhaba DÃ¼nya")
}

	// Token konumlarÄ±nÄ± takip etmek iÃ§in FileSet
	fset := token.NewFileSet()

	file, err := parser.ParseFile(fset, "example.go", src, parser.AllErrors)
	if err != nil {
		panic(err)
	}

	fmt.Println("Paket AdÄ±:", file.Name.Name) // main
}
``
/*
---

### ğŸ”¹ 3. `parser.ParseDir`

* Bir dizindeki **tÃ¼m Go dosyalarÄ±nÄ±** parse eder.
* Geriye `map[string]*ast.Package` dÃ¶ner.
*/
``go
package main

import (
	"fmt"
	"go/parser"
	"go/token"
	"os"
)

func main() {
	fset := token.NewFileSet()

	// GeÃ§erli dizindeki dosyalarÄ± parse et
	pkgs, err := parser.ParseDir(fset, ".", nil, parser.AllErrors)
	if err != nil {
		panic(err)
	}

	for name := range pkgs {
		fmt.Println("Bulunan paket:", name)
	}
}
``
/*
---

### ğŸ”¹ 4. `parser.Mode` (Parse ModlarÄ±)

`ParseFile` ve `ParseDir` fonksiyonlarÄ±nda davranÄ±ÅŸÄ± deÄŸiÅŸtirmek iÃ§in kullanÄ±lÄ±r:

* `parser.PackageClauseOnly` â†’ sadece `package` kÄ±smÄ±nÄ± okur
* `parser.ImportsOnly` â†’ sadece import satÄ±rlarÄ±nÄ± okur
* `parser.ParseComments` â†’ yorum satÄ±rlarÄ±nÄ± da parse eder
* `parser.AllErrors` â†’ tÃ¼m hatalarÄ± raporlar

Ã–rnek:
*/
``go
file, err := parser.ParseFile(fset, "test.go", nil, parser.ImportsOnly)
``
/*
---

# âš¡ Daha KapsamlÄ± Ã–rnek: Fonksiyon Ä°simlerini Ã‡ekmek
*/
``go
package main

import (
	"fmt"
	"go/parser"
	"go/token"
	"go/ast"
)

func main() {
	src := package main

import "fmt"

func hello() { fmt.Println("hi") }
func add(a int, b int) int { return a + b }


	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, "example.go", src, parser.AllErrors)
	if err != nil {
		panic(err)
	}

	// AST Ã¼zerinde gezinti
	ast.Inspect(file, func(n ast.Node) bool {
		if fn, ok := n.(*ast.FuncDecl); ok {
			fmt.Println("Fonksiyon bulundu:", fn.Name.Name)
		}
		return true
	})
}
``

//ğŸ“Œ Ã‡Ä±ktÄ±:

``
Fonksiyon bulundu: hello
Fonksiyon bulundu: add
``
/*
---

# âœ… Ã–zet

`go/parser` paketi:

* **ParseExpr** â†’ Tek ifade (Ã¶r. `x + y*2`)
* **ParseFile** â†’ Tek bir Go dosyasÄ±
* **ParseDir** â†’ Bir dizindeki tÃ¼m Go dosyalarÄ±
* **parser.Mode** â†’ YorumlarÄ±, importlarÄ± veya tÃ¼m hatalarÄ± dahil etmek iÃ§in

kullanÄ±lÄ±r.

KÄ±saca, Go kodunu **AST** (soyut sÃ¶zdizim aÄŸacÄ±) haline getirip Ã¼zerinde iÅŸlem yapmanÄ± saÄŸlar.

---

ğŸ‘‰ Ä°stersen sana `parser` + `ast` paketini birlikte kullanarak **Go kodundan otomatik fonksiyon dokÃ¼mantasyonu Ã§Ä±karan bir mini araÃ§** da yazabilirim. Ä°stiyor musun?
EVET
*/