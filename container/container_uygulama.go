 O zaman  **tek bir Go projesi** iÃ§inde hem `list`, hem `heap`, hem de `ring` kullanÄ±mÄ±nÄ± gÃ¶steren kapsamlÄ± bir Ã¶rnek yazayÄ±m.

Bu Ã¶rnekte senaryo ÅŸu olacak:

* **Bir gÃ¶rev listesi (`list`)** tutacaÄŸÄ±z.
* GÃ¶revlerin Ã¶nceliÄŸini **Ã¶ncelikli kuyruk (`heap`)** ile yÃ¶neteceÄŸiz.
* GÃ¶revleri Ã§alÄ±ÅŸtÄ±rÄ±rken **round-robin (`ring`)** algoritmasÄ±yla dÃ¶ngÃ¼sel sÄ±rada Ã§alÄ±ÅŸtÄ±racaÄŸÄ±z.

---

## KapsamlÄ± Ã–rnek: GÃ¶rev YÃ¶neticisi
*/
package main

import (
	"container/heap"
	"container/list"
	"container/ring"
	"fmt"
)

///////////////////////
// HEAP (Priority Queue)
///////////////////////

type Task struct {
	name     string
	priority int
}

type TaskHeap []Task

func (h TaskHeap) Len() int           { return len(h) }
func (h TaskHeap) Less(i, j int) bool { return h[i].priority < h[j].priority } // KÃ¼Ã§Ã¼k Ã¶ncelikli
func (h TaskHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *TaskHeap) Push(x any) {
	*h = append(*h, x.(Task))
}

func (h *TaskHeap) Pop() any {
	old := *h
	n := len(old)
	item := old[n-1]
	*h = old[:n-1]
	return item
}

///////////////////////
// MAIN
///////////////////////

func main() {
	// 1) LIST -> GÃ¶rev listesi
	taskList := list.New()
	taskList.PushBack(Task{"Backup DB", 2})
	taskList.PushBack(Task{"Email Reports", 3})
	taskList.PushBack(Task{"Clean Cache", 1})

	fmt.Println("=== GÃ¶rev Listesi (list) ===")
	for e := taskList.Front(); e != nil; e = e.Next() {
		t := e.Value.(Task)
		fmt.Printf("GÃ¶rev: %s (Ã¶ncelik %d)\n", t.name, t.priority)
	}

	// 2) HEAP -> Ã–ncelikli kuyruk
	h := &TaskHeap{}
	heap.Init(h)

	for e := taskList.Front(); e != nil; e = e.Next() {
		heap.Push(h, e.Value.(Task))
	}

	fmt.Println("\n=== Ã–ncelikli Kuyruk (heap) ===")
	for h.Len() > 0 {
		task := heap.Pop(h).(Task)
		fmt.Printf("Ã‡alÄ±ÅŸtÄ±rÄ±lÄ±yor -> %s (Ã¶ncelik %d)\n", task.name, task.priority)
	}

	// 3) RING -> Round-robin gÃ¶rev Ã§alÄ±ÅŸtÄ±rma
	fmt.Println("\n=== Round-Robin (ring) ===")
	r := ring.New(3)
	r.Value = "Server-1"
	r.Next().Value = "Server-2"
	r.Next().Next().Value = "Server-3"

	start := r
	for i := 0; i < 6; i++ { // 6 tur dÃ¶ndÃ¼relim
		fmt.Printf("GÃ¶rev Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor -> %v\n", start.Value)
		start = start.Next()
	}
}

/*
---

## Ã‡Ä±ktÄ±

```
=== GÃ¶rev Listesi (list) ===
GÃ¶rev: Backup DB (Ã¶ncelik 2)
GÃ¶rev: Email Reports (Ã¶ncelik 3)
GÃ¶rev: Clean Cache (Ã¶ncelik 1)

=== Ã–ncelikli Kuyruk (heap) ===
Ã‡alÄ±ÅŸtÄ±rÄ±lÄ±yor -> Clean Cache (Ã¶ncelik 1)
Ã‡alÄ±ÅŸtÄ±rÄ±lÄ±yor -> Backup DB (Ã¶ncelik 2)
Ã‡alÄ±ÅŸtÄ±rÄ±lÄ±yor -> Email Reports (Ã¶ncelik 3)

=== Round-Robin (ring) ===
GÃ¶rev Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor -> Server-1
GÃ¶rev Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor -> Server-2
GÃ¶rev Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor -> Server-3
GÃ¶rev Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor -> Server-1
GÃ¶rev Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor -> Server-2
GÃ¶rev Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor -> Server-3
```

---

âœ… BÃ¶ylece tek bir programda `list`, `heap` ve `ring` paketlerinin hepsini kullanmÄ±ÅŸ olduk.
Bu yapÄ±lar sayesinde:

* **list** â†’ dinamik gÃ¶rev listesi,
* **heap** â†’ Ã¶ncelik bazlÄ± seÃ§im,
* **ring** â†’ round-robin Ã§alÄ±ÅŸtÄ±rma mantÄ±ÄŸÄ± kurulmuÅŸ oldu.

---

Ä°stersen ben bunu sana **gerÃ§ek hayat senaryosu** (Ã¶rneÄŸin "CPU Scheduler" veya "Job Queue Manager") ÅŸeklinde daha da geliÅŸtirebilirim. Ä°ster misin?
*/
/*
O zaman az Ã¶nceki Ã¶rneÄŸi **gerÃ§ek hayattaki bir CPU Scheduler (iÅŸlemci gÃ¶rev planlayÄ±cÄ±)** gibi tasarlayalÄ±m.

ğŸ“Œ Senaryomuz:

* CPUâ€™ya gelen **iÅŸler (tasks)** bir **gÃ¶rev kuyruÄŸuna (list)** kaydedilir.
* Ä°ÅŸler **Ã¶ncelik (heap)** kullanÄ±larak sÄ±ralanÄ±r. Yani acil iÅŸler Ã¶nce iÅŸlenir.
* CPU, iÅŸleri **round-robin (ring)** algoritmasÄ±yla mevcut Ã§ekirdekler arasÄ±nda daÄŸÄ±tÄ±r.

---

## Ã–rnek: CPU Scheduler
*/

package main

import (
	"container/heap"
	"container/list"
	"container/ring"
	"fmt"
)

///////////////////////
// TASK ve HEAP (Priority Queue)
///////////////////////

type Task struct {
	name     string
	priority int // KÃ¼Ã§Ã¼k sayÄ± = yÃ¼ksek Ã¶ncelik
}

type TaskHeap []Task

func (h TaskHeap) Len() int           { return len(h) }
func (h TaskHeap) Less(i, j int) bool { return h[i].priority < h[j].priority }
func (h TaskHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *TaskHeap) Push(x any) {
	*h = append(*h, x.(Task))
}

func (h *TaskHeap) Pop() any {
	old := *h
	n := len(old)
	item := old[n-1]
	*h = old[:n-1]
	return item
}

///////////////////////
// MAIN
///////////////////////

func main() {
	// 1) GÃ¶rev kuyruÄŸu (list)
	taskList := list.New()
	taskList.PushBack(Task{"Kritik GÃ¼venlik YamasÄ±", 1})
	taskList.PushBack(Task{"VeritabanÄ± Yedekleme", 3})
	taskList.PushBack(Task{"Log Temizleme", 5})
	taskList.PushBack(Task{"E-posta Raporlama", 4})
	taskList.PushBack(Task{"Makine Ã–ÄŸrenmesi EÄŸitimi", 2})

	fmt.Println("=== Gelen GÃ¶revler (list) ===")
	for e := taskList.Front(); e != nil; e = e.Next() {
		t := e.Value.(Task)
		fmt.Printf("GÃ¶rev: %-25s Ã–ncelik: %d\n", t.name, t.priority)
	}

	// 2) Ã–ncelikli kuyruÄŸa (heap) yÃ¼kle
	h := &TaskHeap{}
	heap.Init(h)

	for e := taskList.Front(); e != nil; e = e.Next() {
		heap.Push(h, e.Value.(Task))
	}

	// 3) CPU Ã§ekirdeklerini (ring) oluÅŸtur
	cores := ring.New(3) // 3 Ã§ekirdekli CPU
	cores.Value = "CPU-Core-1"
	cores.Next().Value = "CPU-Core-2"
	cores.Next().Next().Value = "CPU-Core-3"

	// 4) GÃ¶revleri Ã§ekirdeklere round-robin ile daÄŸÄ±t
	fmt.Println("\n=== CPU Scheduler ===")
	core := cores
	for h.Len() > 0 {
		task := heap.Pop(h).(Task)
		fmt.Printf("[%-10s] Ã§alÄ±ÅŸtÄ±rÄ±yor -> %-25s (Ã¶ncelik %d)\n",
			core.Value, task.name, task.priority)
		core = core.Next()
	}
}

/*
---

## Ã‡Ä±ktÄ±

```
=== Gelen GÃ¶revler (list) ===
GÃ¶rev: Kritik GÃ¼venlik YamasÄ±      Ã–ncelik: 1
GÃ¶rev: VeritabanÄ± Yedekleme        Ã–ncelik: 3
GÃ¶rev: Log Temizleme               Ã–ncelik: 5
GÃ¶rev: E-posta Raporlama           Ã–ncelik: 4
GÃ¶rev: Makine Ã–ÄŸrenmesi EÄŸitimi    Ã–ncelik: 2

=== CPU Scheduler ===
[CPU-Core-1] Ã§alÄ±ÅŸtÄ±rÄ±yor -> Kritik GÃ¼venlik YamasÄ±      (Ã¶ncelik 1)
[CPU-Core-2] Ã§alÄ±ÅŸtÄ±rÄ±yor -> Makine Ã–ÄŸrenmesi EÄŸitimi    (Ã¶ncelik 2)
[CPU-Core-3] Ã§alÄ±ÅŸtÄ±rÄ±yor -> VeritabanÄ± Yedekleme        (Ã¶ncelik 3)
[CPU-Core-1] Ã§alÄ±ÅŸtÄ±rÄ±yor -> E-posta Raporlama           (Ã¶ncelik 4)
[CPU-Core-2] Ã§alÄ±ÅŸtÄ±rÄ±yor -> Log Temizleme               (Ã¶ncelik 5)
```

---

âœ… Burada:

* **list** â†’ gelen gÃ¶rev kuyruÄŸunu temsil etti.
* **heap** â†’ Ã¶nceliÄŸe gÃ¶re hangi iÅŸin Ã¶nce yapÄ±lacaÄŸÄ±nÄ± seÃ§ti.
* **ring** â†’ gÃ¶revlerin Ã§ekirdekler arasÄ±nda round-robin ile daÄŸÄ±tÄ±lmasÄ±nÄ± saÄŸladÄ±.

---
*/