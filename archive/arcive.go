// Go programlama dilinde, standart kÃ¼tÃ¼phane iÃ§inde sÄ±kÄ±ÅŸtÄ±rÄ±lmÄ±ÅŸ dosyalarla Ã§alÄ±ÅŸmak iÃ§in kullanÄ±lan bazÄ± Ã¶nemli paketler ÅŸunlardÄ±r:

// -archive/tar

// -archive/zip

// -compress/gzip, compress/zlib, vs.

// Bu yanÄ±t, Ã¶zellikle archive/tar ve archive/zip paketlerinin kullanÄ±mÄ±na odaklanacak ve Ã¶rneklerle aÃ§Ä±klayacaktÄ±r.


// ğŸ“¦ 1. archive/tar â€” TAR ArÅŸivleriyle Ã‡alÄ±ÅŸma

// archive/tar, .tar formatÄ±ndaki arÅŸiv dosyalarÄ±nÄ± oluÅŸturmak (write) ve aÃ§mak (read) iÃ§in kullanÄ±lÄ±r. .tar.gz gibi dosyalarÄ± iÅŸlemek iÃ§in compress/gzip paketiyle birlikte kullanÄ±lÄ±r.

package main

import (
    "archive/tar"
    "os"
)

func main() {
    file, err := os.Create("output.tar")
    if err != nil {
        panic(err)
    }
    defer file.Close()

    tw := tar.NewWriter(file)
    defer tw.Close()

    // ArÅŸive eklenecek dosya bilgileri
    content := []byte("Hello, this is file content!")
    hdr := &tar.Header{
        Name: "file1.txt",
        Mode: 0600,
        Size: int64(len(content)),
    }

    // Header ve iÃ§eriÄŸi yaz
    if err := tw.WriteHeader(hdr); err != nil {
        panic(err)
    }

    if _, err := tw.Write(content); err != nil {
        panic(err)
    }
}

/*
Goâ€™da *EOF* (End Of File), *dosya veya veri kaynaÄŸÄ±ndan okuma sÄ±rasÄ±nda verinin bittiÄŸini* gÃ¶stermek iÃ§in kullanÄ±lan bir iÅŸarettir.

Go standart kÃ¼tÃ¼phanesinde bu genelde io.EOF sabiti ile temsil edilir.

---

### ğŸ“Œ Temel MantÄ±k

* Bir dosyadan, aÄŸ baÄŸlantÄ±sÄ±ndan veya bufferâ€™dan okuma yaptÄ±ÄŸÄ±nda:

  * EÄŸer veri varsa â†’ okunur.
  * EÄŸer *okunacak veri kalmamÄ±ÅŸsa* â†’ EOF dÃ¶ner.

Yani EOF bir *hata gibi gÃ¶rÃ¼nen ama aslÄ±nda normal bir durumdur*.

---

### Ã–rnek: Dosya Okuma

go
package main

import (
	"fmt"
	"io"
	"os"
)

func main() {
	f, err := os.Open("dosya.txt")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	buf := make([]byte, 10)
	for {
		n, err := f.Read(buf)
		if err == io.EOF {
			fmt.Println("\nDosyanÄ±n sonuna ulaÅŸÄ±ldÄ±.")
			break
		}
		if err != nil {
			fmt.Println("Hata:", err)
			break
		}
		fmt.Print(string(buf[:n]))
	}
}


ğŸ‘‰ Burada f.Read(buf) Ã§aÄŸrÄ±sÄ± dosya sonuna gelince io.EOF dÃ¶ndÃ¼rÃ¼yor.
Bu da dÃ¶ngÃ¼yÃ¼ sonlandÄ±rmak iÃ§in kullanÄ±lÄ±yor.

---

âœ… *Ã–zet:*
Goâ€™da *EOF, dosya/stream okurken **artÄ±k veri kalmadÄ±ÄŸÄ±nÄ±* ifade eder.

* Hata deÄŸildir, *normal bir durumdur*.
* Genellikle if err == io.EOF { break } ÅŸeklinde kontrol edilir.

---
âœ… AÃ§Ä±klama:

strings.NewReader bir io.Reader dÃ¶ndÃ¼rÃ¼r.

Read metodu ile veri okunur.

Veri bitince io.EOF dÃ¶ner ve dÃ¶ngÃ¼ kÄ±rÄ±lÄ±r.
*/

//âœ… Ã–rnek: .tar ArÅŸivini AÃ§ma

package main

import (
    "archive/tar"
    "fmt"
    "io"
    "os"
)

func main() {
    file, err := os.Open("output.tar")
    if err != nil {
        panic(err)
    }
    defer file.Close()

    tr := tar.NewReader(file)

    for {
        hdr, err := tr.Next()
        if err == io.EOF {
            break
        }
        if err != nil {
            panic(err)
        }

        fmt.Println("Dosya:", hdr.Name)
        content, _ := io.ReadAll(tr)
        fmt.Println("Ä°Ã§erik:", string(content))
    }
}


// ğŸ“¦ 2. archive/zip â€” ZIP ArÅŸivleriyle Ã‡alÄ±ÅŸma

// archive/zip, .zip formatÄ±ndaki dosyalarÄ± okumak ve oluÅŸturmak iÃ§in kullanÄ±lÄ±r. GeniÅŸ platform desteÄŸi nedeniyle sÄ±k tercih edilir.

// âœ… Ã–rnek: .zip ArÅŸivi OluÅŸturma

package main

import (
    "archive/zip"
    "bytes"
    "os"
)

func main() {
    file, err := os.Create("output.zip")
    if err != nil {
        panic(err)
    }
    defer file.Close()

    zw := zip.NewWriter(file)
    defer zw.Close()

    // Dosya ekle
    f, err := zw.Create("file1.txt")
    if err != nil {
        panic(err)
    }

    _, err = f.Write([]byte("This is file content inside zip"))
    if err != nil {
        panic(err)
    }
}



//Ã–rnek: .zip ArÅŸivini AÃ§ma

package main

import (
    "archive/zip"
    "fmt"
    "io"
    "os"
)

func main() {
    r, err := zip.OpenReader("output.zip")
    if err != nil {
        panic(err)
    }
    defer r.Close()

    for _, f := range r.File {
        fmt.Println("Dosya:", f.Name)
        rc, err := f.Open()
        if err != nil {
            panic(err)
        }
        content, _ := io.ReadAll(rc)
        fmt.Println("Ä°Ã§erik:", string(content))
        rc.Close()
    }
}


//ğŸ”„ tar + gzip ile .tar.gz OluÅŸturma

package main

import (
    "archive/tar"
    "compress/gzip"
    "os"
)

func main() {
    file, _ := os.Create("output.tar.gz")
    defer file.Close()

    gw := gzip.NewWriter(file)
    defer gw.Close()

    tw := tar.NewWriter(gw)
    defer tw.Close()

    content := []byte("This is compressed file")
    hdr := &tar.Header{
        Name: "file.txt",
        Mode: 0600,
        Size: int64(len(content)),
    }

    tw.WriteHeader(hdr)
    tw.Write(content)
}




