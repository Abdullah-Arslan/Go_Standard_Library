

// Goâ€™da **`builtin`** adÄ±nda Ã¶zel bir **paket** vardÄ±r.

// * Bu paket aslÄ±nda **Go diline gÃ¶mÃ¼lÃ¼ (built-in) tÃ¼rleri, sabitleri ve fonksiyonlarÄ±** iÃ§erir.
// * Yani `int`, `string`, `len()`, `make()`, `append()`, `panic()` gibi ÅŸeyler aslÄ±nda **`builtin` paketinde tanÄ±mlÄ±dÄ±r**.
// * Ama biz kod yazarken `import "builtin"` diye eklemeyiz â†’ Ã§Ã¼nkÃ¼ bu paket derleyici tarafÄ±ndan otomatik olarak kullanÄ±lÄ±r.
// * KaynaÄŸÄ±na bakabilirsin: [https://pkg.go.dev/builtin](https://pkg.go.dev/builtin)

// KÄ±saca:
// ğŸ‘‰ **`builtin` paketi = Goâ€™nun Ã§ekirdeÄŸine gÃ¶mÃ¼lÃ¼ olan temel araÃ§larÄ±n tanÄ±m yeri.**

// ---

// # ğŸ“¦ `builtin` Paketinde Neler Var?


//  1. **Temel TÃ¼rler**

// * `bool`, `byte`, `rune`
// * `int`, `int8`, `int16`, `int32`, `int64`
// * `uint`, `uint8`, `uint16`, `uint32`, `uint64`, `uintptr`
// * `float32`, `float64`
// * `complex64`, `complex128`
// * `string`, `error`

// âœ… Ã–rnek:


package main

import "fmt"

func main() {
	var a bool = true
	var b int = 42
	var c float64 = 3.14
	var d string = "Merhaba"
	var e error = fmt.Errorf("bir hata oluÅŸtu")

	fmt.Println(a, b, c, d, e)
}

// ---

//  2. **Sabitler**

// * `true`, `false`
// * `iota` â†’ artan sabit Ã¼retici

// Goâ€™da iota Ã¶zel bir sabit tanÄ±mlama aracÄ±dÄ±r.

// iota, const bloklarÄ± iÃ§inde kullanÄ±lÄ±r ve otomatik artan tamsayÄ±lar Ã¼retir.

// Ä°lk satÄ±rda 0 deÄŸerinden baÅŸlar, her satÄ±rda 1 artar.

// Genellikle enum (numaralandÄ±rma) benzeri deÄŸerler tanÄ±mlamak iÃ§in kullanÄ±lÄ±r

// âœ… Ã–rnek:


package main

import "fmt"

func main() {
	const (
		A = iota // 0
		B        // 1
		C        // 2
	)

	fmt.Println(true, false, A, B, C)
}


//---

//  3. **YerleÅŸik Fonksiyonlar**

// `builtin` paketinde tanÄ±mlÄ± olan fonksiyonlar ÅŸunlardÄ±r:

// ğŸ”¹ `len(v)` â†’ Uzunluk dÃ¶ner


fmt.Println(len("Merhaba"))       // 7
fmt.Println(len([]int{1,2,3,4})) // 4


// ğŸ”¹ `cap(v)` â†’ Kapasite dÃ¶ner


s := make([]int, 2, 5)
fmt.Println(len(s), cap(s)) // 2 5


// ğŸ”¹ `make()` â†’ Slice, map, channel oluÅŸturur


sl := make([]int, 3)
mp := make(map[string]int)
ch := make(chan int)

fmt.Println(sl, mp, ch)


// ğŸ”¹ `new()` â†’ Bellekte sÄ±fÄ±r deÄŸerli bir deÄŸiÅŸken oluÅŸturur (pointer dÃ¶ner)


x := new(int)
fmt.Println(*x) // 0
*x = 42
fmt.Println(*x) // 42

// ğŸ”¹ `append(slice, elems...)` â†’ Sliceâ€™a eleman ekler


s := []int{1, 2}
s = append(s, 3, 4)
fmt.Println(s) // [1 2 3 4]


// ğŸ”¹ `copy(dst, src)` â†’ Slice kopyalar


src := []int{1,2,3}
dst := make([]int, 3)
copy(dst, src)
fmt.Println(dst) // [1 2 3]
```

//ğŸ”¹ `delete(map, key)` â†’ Mapâ€™ten eleman siler


m := map[string]int{"a": 1, "b": 2}
delete(m, "a")
fmt.Println(m) // map[b:2]


//  ğŸ”¹ `complex(r, i)` â†’ KarmaÅŸÄ±k sayÄ± oluÅŸturur

//  ğŸ”¹ `real(c)` â†’ KarmaÅŸÄ±k sayÄ±nÄ±n reel kÄ±smÄ±

//  ğŸ”¹ `imag(c)` â†’ KarmaÅŸÄ±k sayÄ±nÄ±n sanal kÄ±smÄ±


c := complex(2, 3) // 2+3i
fmt.Println(real(c), imag(c)) // 2 3


// #### ğŸ”¹ `close(ch)` â†’ Kanal kapatÄ±r

// #### ğŸ”¹ `panic(v)` â†’ Panik baÅŸlatÄ±r (hata)

// #### ğŸ”¹ `recover()` â†’ Panikten kurtarÄ±r


func main() {
	defer func() {
		if r := recover(); r != nil {
			fmt.Println("Panik yakalandÄ±:", r)
		}
	}()
	panic("Bir hata oldu")
}

// ```

// #### ğŸ”¹ `print()` ve `println()`

// * Debug amaÃ§lÄ± basit Ã§Ä±ktÄ± verir (fmt gibi deÄŸildir).

// ---

// # ğŸš€ Ã–zet

// * **`builtin` paketi** = Goâ€™nun temel yapÄ± taÅŸlarÄ±
// * Ä°Ã§inde ÅŸunlar var:

//   * Temel tÃ¼rler (int, string, error, â€¦)
//   * Sabitler (true, false, iota)
//   * YerleÅŸik fonksiyonlar (`len`, `cap`, `make`, `append`, `copy`, `delete`, `complex`, `real`, `imag`, `close`, `panic`, `recover`, `print`, `println`)

// ğŸ‘‰ BunlarÄ± kullanmak iÃ§in `import "builtin"` yazmana gerek yok. Zaten **her Go dosyasÄ±nda otomatik olarak kullanÄ±labilir.**

// ---

