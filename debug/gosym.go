/*
Goâ€™daki **`debug/gosym`** paketini baÅŸtan sona, Ã¶rneklerle anlatayÄ±m.

---

# ğŸ“Œ `debug/gosym` Paketi Nedir?

Goâ€™nun **`debug/gosym`** paketi, derlenmiÅŸ Go programlarÄ±nÄ±n **sembol tablolarÄ±nÄ±** ve **debug bilgilerini** okumak iÃ§in kullanÄ±lÄ±r.
Ã–zellikle **eski formatlardaki Go derlenmiÅŸ ikili dosyalar** iÃ§in (Go 1.10 Ã¶ncesi `6l`, `8l`, `5l` linkleyicileri) tasarlanmÄ±ÅŸtÄ±r.
GÃ¼nÃ¼mÃ¼zde modern Go binaryâ€™lerinde daha Ã§ok **`debug/dwarf`** ve **`debug/elf` / `debug/macho` / `debug/pe`** kullanÄ±lsa da, `gosym` hÃ¢lÃ¢ iÅŸlevseldir Ã§Ã¼nkÃ¼:

* **Fonksiyon isimlerini** Ã§Ã¶zÃ¼mlemeye (PC â†’ fonksiyon adÄ± eÅŸleÅŸtirmesi) yarar.
* **Sembolleri** ve **satÄ±r tablolarÄ±nÄ±** okumaya yarar.
* Profiling, debugging, stack trace Ã§Ã¶zÃ¼mleme gibi iÅŸlerde kullanÄ±labilir.

---

# ğŸ“Œ Temel Kavramlar

`gosym` Ã¼Ã§ ana yapÄ± etrafÄ±nda Ã§alÄ±ÅŸÄ±r:

1. **`Sym`** â†’ Bir sembol (Ã¶r. fonksiyon veya deÄŸiÅŸken)
2. **`LineTable`** â†’ Program counter (PC) adresi ile kaynak dosya/satÄ±r iliÅŸkisini tutar
3. **`Table`** â†’ Sembol tablosu (`Sym` listesi) + `LineTable`

---

# ğŸ“Œ Ã–nemli Tipler ve Fonksiyonlar

### 1. `Sym`

Bir Go sembolÃ¼nÃ¼ temsil eder.
*/

``go
type Sym struct {
    Value  uint64 // Bellekteki adres
    Type   byte   // Sembol tipi (T = text, D = data)
    Name   string // Fonksiyon / deÄŸiÅŸken adÄ±
    GoType uint64 // Go tipi (varsa)
}
``
/*
---

### 2. `LineTable`

Adres â†” Dosya/SatÄ±r eÅŸlemesini tutar.
*/

``go
func (lt *LineTable) PCToLine(pc uint64) (file string, line int, fn *Sym)
``
/*
* `pc` adresinden dosya adÄ±, satÄ±r numarasÄ± ve fonksiyon sembolÃ¼nÃ¼ verir.

---

### 3. `Table`

Sembollerin ve `LineTable`â€™Ä±n birleÅŸimidir.
*/

``go
type Table struct {
    Syms  []Sym
    Funcs []Func
    LT    *LineTable
}
``

//`Table` oluÅŸturma:

``go
tab, err := gosym.NewTable(symtabData, lineTable)
``
/*
---

# ğŸ“Œ Ã–rnek 1 â€“ Basit Sembol Tablosu Okuma

AÅŸaÄŸÄ±daki Ã¶rnekte, derlenmiÅŸ bir Go binaryâ€™sinden sembolleri okuyoruz:
*/

``go
package main

import (
    "debug/gosym"
    "debug/elf"
    "fmt"
    "log"
    "os"
)

func main() {
    if len(os.Args) < 2 {
        log.Fatalf("KullanÄ±m: %s <binary>\n", os.Args[0])
    }

    bin := os.Args[1]
    f, err := elf.Open(bin)
    if err != nil {
        log.Fatal(err)
    }
    defer f.Close()

    // .gosymtab ve .gopclntab sectionlarÄ±nÄ± bul
    symtabSec := f.Section(".gosymtab")
    pclnSec := f.Section(".gopclntab")
    if symtabSec == nil || pclnSec == nil {
        log.Fatal("Bu binary .gosymtab veya .gopclntab iÃ§ermiyor.")
    }

    symtabData, _ := symtabSec.Data()
    pclnData, _ := pclnSec.Data()

    // LineTable oluÅŸtur
    lineTable := gosym.NewLineTable(pclnData, f.Section(".text").Addr)

    // Sembol tablosu oluÅŸtur
    table, err := gosym.NewTable(symtabData, lineTable)
    if err != nil {
        log.Fatal(err)
    }

    // FonksiyonlarÄ± yazdÄ±r
    for _, fn := range table.Funcs {
        fmt.Printf("Fonksiyon: %-30s Start=0x%x End=0x%x\n",
            fn.Sym.Name, fn.Sym.Value, fn.End)
    }
}
``

//ğŸ“Œ Ã‡alÄ±ÅŸtÄ±r:

``bash
go build -o myprog main.go
go run gosym_reader.go ./myprog
``
/*
Ã–rnek Ã§Ä±ktÄ±:

```
Fonksiyon: main.main                   Start=0x45e000 End=0x45e120
Fonksiyon: main.helper                 Start=0x45e130 End=0x45e190
Fonksiyon: runtime.main                Start=0x401000 End=0x401320
...
```

---

# ğŸ“Œ Ã–rnek 2 â€“ Adresten SatÄ±r Bilgisi Bulma
*/

``go
pc := table.LookupFunc("main.main").Sym.Value
file, line, fn := table.LT.PCToLine(pc)
fmt.Printf("Adres 0x%x -> %s:%d (fonksiyon %s)\n", pc, file, line, fn.Name)
``
/*
Ã‡Ä±ktÄ±:

```
Adres 0x45e000 -> /home/user/main.go:10 (fonksiyon main.main)
```

---

# ğŸ“Œ Ã–rnek 3 â€“ Sembolleri Tek Tek Listeleme
*/

``go
for _, sym := range table.Syms {
    fmt.Printf("Sembol: %-30s Addr=0x%x Type=%c\n", sym.Name, sym.Value, sym.Type)
}
``
/*
Ã–rnek Ã§Ä±ktÄ±:

```
Sembol: main.main                     Addr=0x45e000 Type=T
Sembol: main.helper                   Addr=0x45e130 Type=T
Sembol: runtime.printstring           Addr=0x401200 Type=T
Sembol: fmt.Println                    Addr=0x0 Type=U
```

---

# ğŸ“Œ `gosym` KullanÄ±m AlanlarÄ±

* Go binaryâ€™sinden **fonksiyon isimlerini Ã§Ã¶zmek**
* Profil/trace araÃ§larÄ± (Ã¶r. `pprof`) yazmak
* Stack traceâ€™lerde adresleri **kaynak dosya + satÄ±ra dÃ¶nÃ¼ÅŸtÃ¼rmek**
* `dlv` (Delve debugger) gibi debug araÃ§larÄ±nda

---

âœ… **Ã–zetle**:

* `debug/gosym`, Go binaryâ€™lerindeki sembolleri ve satÄ±r tablolarÄ±nÄ± okumak iÃ§in kullanÄ±lan eski ama yararlÄ± bir pakettir.
* `.gosymtab` ve `.gopclntab` sectionâ€™larÄ±nÄ± okuyarak sembollere ulaÅŸÄ±r.
* Fonksiyon isimlerini Ã§Ã¶zme, stack trace adreslerini dosya/satÄ±r ile eÅŸleÅŸtirme gibi iÅŸlerde kullanÄ±lÄ±r.

---

Ä°stersen ben sana `gosym` ile yazÄ±lmÄ±ÅŸ **mini bir stacktrace Ã§Ã¶zÃ¼cÃ¼** (adres â†’ dosya.go\:line + fonksiyon adÄ±) yapabilirim. Bunu ister misin?
EVET

SÃ¼per ğŸš€ O zaman sana **`gosym` ile stack trace Ã§Ã¶zÃ¼cÃ¼** bir mini araÃ§ yazayÄ±m.
Bu araÃ§, elimizdeki bir Go binaryâ€™si (`.exe`, `./myprog`) iÃ§in adresleri alacak ve o adreslerin hangi **dosya.go\:satÄ±r** ve **fonksiyon**a denk geldiÄŸini gÃ¶sterecek.

---

# ğŸ“Œ Mini Stack Trace Ã‡Ã¶zÃ¼cÃ¼ (`addr2line` benzeri)
*/

``go
package main

import (
	"bufio"
	"debug/elf"
	"debug/gosym"
	"fmt"
	"log"
	"os"
	"strconv"
)

func main() {
	if len(os.Args) < 2 {
		log.Fatalf("KullanÄ±m: %s <binary>\n", os.Args[0])
	}

	// ELF dosyasÄ±nÄ± aÃ§
	file := os.Args[1]
	f, err := elf.Open(file)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	// Gerekli sectionlarÄ± bul
	symtabSec := f.Section(".gosymtab")
	pclnSec := f.Section(".gopclntab")
	textSec := f.Section(".text")

	if symtabSec == nil || pclnSec == nil || textSec == nil {
		log.Fatal("ELF dosyasÄ± .gosymtab / .gopclntab / .text sectionlarÄ±nÄ± iÃ§ermiyor.")
	}

	// Section verilerini al
	symtabData, _ := symtabSec.Data()
	pclnData, _ := pclnSec.Data()

	// LineTable ve Table oluÅŸtur
	lineTable := gosym.NewLineTable(pclnData, textSec.Addr)
	table, err := gosym.NewTable(symtabData, lineTable)
	if err != nil {
		log.Fatal(err)
	}

	// KullanÄ±cÄ±dan adres al
	fmt.Println("Adresleri hex formatÄ±nda gir (Ã¶r: 0x45e000). Ã‡Ä±kÄ±ÅŸ iÃ§in boÅŸ satÄ±r bÄ±rak.")
	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Print("> ")
		if !scanner.Scan() {
			break
		}
		line := scanner.Text()
		if line == "" {
			break
		}

		// Hex string â†’ uint64 Ã§evir
		addr, err := strconv.ParseUint(line, 0, 64)
		if err != nil {
			fmt.Println("GeÃ§ersiz adres:", err)
			continue
		}

		// Adresi Ã§Ã¶z
		file, lno, fn := table.LT.PCToLine(addr)
		if fn != nil {
			fmt.Printf("0x%x => %s:%d (fonksiyon: %s)\n", addr, file, lno, fn.Name)
		} else {
			fmt.Printf("0x%x => Ã§Ã¶zÃ¼m bulunamadÄ±\n", addr)
		}
	}
}
``
/*
---

# ğŸ“Œ KullanÄ±m

1. Ã–rnek bir Go programÄ± derle:
*/

``go
package main

import "fmt"

func helper() {
	fmt.Println("yardÄ±mcÄ± fonksiyon")
}

func main() {
	helper()
	fmt.Println("merhaba dÃ¼nya")
}
``

//Kaydet: `program.go`

``bash
go build -o myprog program.go
``

//2. Ã‡Ã¶zÃ¼cÃ¼yÃ¼ Ã§alÄ±ÅŸtÄ±r:

``bash
go run stacktrace_resolver.go ./myprog
``
/*
3. Adres gir (Ã¶rneÄŸin `objdump -d myprog` veya `nm myprog` ile bulduÄŸun bir adres):

```
Adresleri hex formatÄ±nda gir (Ã¶r: 0x45e000). Ã‡Ä±kÄ±ÅŸ iÃ§in boÅŸ satÄ±r bÄ±rak.
> 0x45e000
0x45e000 => /home/user/program.go:4 (fonksiyon: main.helper)
> 0x45e050
0x45e050 => /home/user/program.go:8 (fonksiyon: main.main)
>
```

---

âœ… BÃ¶ylece elimizde kÃ¼Ã§Ã¼k bir **Go `addr2line` aracÄ±** oldu.

* ELF dosyasÄ±nÄ± aÃ§Ä±yor,
* `.gosymtab` + `.gopclntab` sectionlarÄ±nÄ± kullanÄ±yor,
* Adresleri dosya, satÄ±r ve fonksiyon adÄ±na Ã§eviriyor.

---

ğŸ‘‰ Ä°stersen ben bu aracÄ± daha da geliÅŸtirip `panic` Ã§Ä±ktÄ±sÄ±nÄ± (stack trace) **otomatik parse edip Ã§Ã¶zÃ¼mleyen** bir versiyon da yapabilirim. Bunu ister misin?
*/