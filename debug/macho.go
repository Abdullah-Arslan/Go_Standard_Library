/*
Goâ€™daki **`debug/macho`** paketini baÅŸtan sona Ã¶rneklerle anlatayÄ±m.

---

# ğŸ“Œ `debug/macho` Paketi Nedir?

Goâ€™nun **`debug/macho`** paketi, **Mach-O (Mach Object)** formatÄ±ndaki dosyalarÄ± okumak iÃ§in kullanÄ±lÄ±r.
Mach-O, **macOS** ve **iOS** sistemlerinde kullanÄ±lan standart Ã§alÄ±ÅŸtÄ±rÄ±labilir dosya formatÄ±dÄ±r.
Yani Linuxâ€™ta ELF, Windowsâ€™ta PE/COFF neyse, macOS tarafÄ±nda **Mach-O** odur.

Goâ€™daki `debug/macho` paketi, ELF iÃ§in `debug/elf`, Windows iÃ§in `debug/pe` gibi **Mach-O dosyalarÄ±nÄ±n header, section, segment, sembol tablolarÄ±nÄ±** Ã§Ã¶zÃ¼mlemenizi saÄŸlar.

---

# ğŸ“Œ Ã–nemli YapÄ±lar

`debug/macho` ile aÃ§Ä±lan bir dosya ÅŸu bilgileri iÃ§erir:

* **`FileHeader`** â†’ Mach-O dosyasÄ±nÄ±n temel bilgileri (magic, CPU tipi, flags, dosya tipi)
* **`Load`** â†’ YÃ¼kleme komutlarÄ± (segmentler, dylib baÄŸÄ±mlÄ±lÄ±klarÄ±, vs.)
* **`Segment`** â†’ Segment bilgileri (kod, veri, stack, vs.)
* **`Section`** â†’ Segment iÃ§indeki bÃ¶lÃ¼mler (`__TEXT.__text`, `__DATA.__data`, vs.)
* **`Symtab`** â†’ Sembol tablosu (fonksiyon, global deÄŸiÅŸkenler)
* **`Dysymtab`** â†’ Dinamik semboller (paylaÅŸÄ±mlÄ± kÃ¼tÃ¼phane baÄŸlarÄ±)
* **`Dylib`** â†’ KullanÄ±lan kÃ¼tÃ¼phaneler (Ã¶rn: `/usr/lib/libSystem.B.dylib`)

---

# ğŸ“Œ Mach-O DosyasÄ±nÄ± AÃ§ma
*/
``go
package main

import (
    "debug/macho"
    "fmt"
    "log"
    "os"
)

func main() {
    if len(os.Args) < 2 {
        log.Fatalf("KullanÄ±m: %s <mach-o dosyasÄ±>\n", os.Args[0])
    }

    file := os.Args[1]
    f, err := macho.Open(file)
    if err != nil {
        log.Fatal(err)
    }
    defer f.Close()

    fmt.Printf("CPU: %v\n", f.Cpu)
    fmt.Printf("Dosya tipi: %v\n", f.Type)
    fmt.Printf("Bayraklar: 0x%x\n", f.Flags)
}
``

/*
ğŸ“Œ Ã‡Ä±ktÄ± Ã¶rneÄŸi (`/bin/ls` iÃ§in macOSâ€™ta):

```
CPU: x86_64
Dosya tipi: EXECUTE
Bayraklar: 0x2000
```

---

# ğŸ“Œ Segmentleri Listeleme

Mach-O dosyasÄ±nda segmentler (Ã¶r. `__TEXT`, `__DATA`) vardÄ±r.
*/
``go
for _, seg := range f.Segments {
    fmt.Printf("Segment: %-10s VMAddr=0x%x FileOff=0x%x Size=%d\n",
        seg.Name, seg.Addr, seg.Offset, seg.Filesz)
}
``
7?
Ã–rnek Ã§Ä±ktÄ±:

```
Segment: __TEXT      VMAddr=0x100000000 FileOff=0x0 Size=4096
Segment: __DATA      VMAddr=0x100001000 FileOff=0x1000 Size=2048
```

---

# ğŸ“Œ Sectionâ€™larÄ± Listeleme

Her segment iÃ§inde **section** bulunur.
*/

``go
for _, sec := range f.Sections {
    fmt.Printf("Section: %-20s Segment=%s Addr=0x%x Size=%d\n",
        sec.Name, sec.Seg, sec.Addr, sec.Size)
}
``
/*
Ã–rnek Ã§Ä±ktÄ±:

```
Section: __text               Segment=__TEXT Addr=0x100001000 Size=1536
Section: __cstring            Segment=__TEXT Addr=0x100002000 Size=256
Section: __data               Segment=__DATA Addr=0x100003000 Size=128
```

---

# ğŸ“Œ Sembol Tablosunu Okuma

Mach-O dosyalarÄ± fonksiyon ve sembol tablolarÄ±nÄ± iÃ§erir.
*/

``go
if f.Symtab != nil {
    for _, sym := range f.Symtab.Syms {
        fmt.Printf("Sembol: %-30s Value=0x%x Type=%x\n", sym.Name, sym.Value, sym.Type)
    }
}
``
/*
Ã–rnek Ã§Ä±ktÄ±:

```
Sembol: _main                         Value=0x1000010f0 Type=0xf
Sembol: _printf                       Value=0x0 Type=0x1
```

---

# ğŸ“Œ Dinamik KÃ¼tÃ¼phaneleri Listeleme

Mach-O Ã§alÄ±ÅŸtÄ±rÄ±labilirleri hangi dylibâ€™lere baÄŸlÄ±dÄ±r?
*/

``go
for _, dylib := range f.Dylibs {
    fmt.Println("Dylib:", dylib.Name)
}
``
/*
Ã–rnek Ã§Ä±ktÄ±:

```
Dylib: /usr/lib/libSystem.B.dylib
Dylib: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
```

---

# ğŸ“Œ Tam Ã–rnek â€“ Mach-O Ä°nceleme AracÄ±
*/
``go
package main

import (
    "debug/macho"
    "fmt"
    "log"
    "os"
)

func main() {
    if len(os.Args) < 2 {
        log.Fatalf("KullanÄ±m: %s <mach-o dosyasÄ±>\n", os.Args[0])
    }

    file := os.Args[1]
    f, err := macho.Open(file)
    if err != nil {
        log.Fatal(err)
    }
    defer f.Close()

    fmt.Println("== MACH-O HEADER ==")
    fmt.Printf("CPU: %v, Type: %v, Flags: 0x%x\n", f.Cpu, f.Type, f.Flags)

    fmt.Println("\n== SEGMENTS ==")
    for _, seg := range f.Segments {
        fmt.Printf("Segment: %-10s Addr=0x%x Size=%d\n", seg.Name, seg.Addr, seg.Filesz)
    }

    fmt.Println("\n== SECTIONS ==")
    for _, sec := range f.Sections {
        fmt.Printf("Section: %-20s Segment=%s Addr=0x%x Size=%d\n",
            sec.Name, sec.Seg, sec.Addr, sec.Size)
    }

    fmt.Println("\n== SYMBOLS ==")
    if f.Symtab != nil {
        for _, sym := range f.Symtab.Syms {
            fmt.Printf("%-30s 0x%x\n", sym.Name, sym.Value)
        }
    } else {
        fmt.Println("Sembol tablosu bulunamadÄ±.")
    }

    fmt.Println("\n== DYLIBS ==")
    for _, dylib := range f.Dylibs {
        fmt.Println(dylib.Name)
    }
}
``

//ğŸ“Œ KullanÄ±m:

``bash
go run macho_reader.go /bin/ls
``
/*
---

# ğŸ“Œ Ã–zet

`debug/macho` paketi ile:

* âœ… Mach-O dosyalarÄ±nÄ±n **header** bilgilerini okuyabilirsiniz
* âœ… Segment ve section bilgilerini listeleyebilirsiniz
* âœ… Sembol tablosunu ve dinamik sembolleri alabilirsiniz
* âœ… Hangi **dylib**â€™lere baÄŸlÄ± olduÄŸunu Ã¶ÄŸrenebilirsiniz

Bu sayede `otool -l`, `nm`, `otool -L` gibi macOS komutlarÄ±nÄ±n Go ile yazÄ±lmÄ±ÅŸ mini versiyonunu yapabilirsin.

---

ğŸ‘‰ Ä°stersen sana Linuxâ€™taki `readelf` benzeri ama macOS iÃ§in bir **`otool` klonu** (Go ile yazÄ±lmÄ±ÅŸ Mach-O analiz aracÄ±) kodlayabilirim. Bunu ister misin?
*/