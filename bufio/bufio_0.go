// Go dilinde **`bufio`** paketi, giriÅŸ/Ã§Ä±kÄ±ÅŸ (I/O) iÅŸlemlerini **buffer** (tampon) kullanarak daha verimli hale getiren bir pakettir.
// Normalde `os.File`, `net.Conn` gibi yapÄ±larla doÄŸrudan okuma/yazma yaptÄ±ÄŸÄ±nda her iÅŸlem iÅŸletim sistemi Ã§aÄŸrÄ±sÄ± gerektirir (maliyetli olur). 
// `bufio`, araya bir tampon koyarak I/O iÅŸlemlerini hÄ±zlandÄ±rÄ±r.


//TAMPON NEDÄ°R?
// Go programlama dilinde bufio.Writer, tamponlu (buffered) yazma iÅŸlemleri yapmak iÃ§in kullanÄ±lan bir yapÄ±dÄ±r. 
// "Tamponlu yazma" ifadesi, verilerin doÄŸrudan hedefe (Ã¶rneÄŸin bir dosyaya veya bir aÄŸ baÄŸlantÄ±sÄ±na) yazÄ±lmak 
// yerine Ã¶nce bir bellek tamponuna (buffer) yazÄ±lmasÄ±, ardÄ±ndan bu tamponun dolmasÄ± ya da aÃ§Ä±kÃ§a boÅŸaltÄ±lmasÄ± durumunda hedefe yazÄ±lmasÄ± anlamÄ±na gelir.

// Bellek tamponu (buffer), geÃ§ici olarak veri saklamak iÃ§in kullanÄ±lan bir RAM alanÄ±dÄ±r. 
// Veri bir yerden bir yere gÃ¶nderilirken (Ã¶rneÄŸin klavyeden programa, programdan dosyaya, 
// programdan aÄŸa) genellikle hemen iÅŸlenmez ya da gÃ¶nderilmez; Ã¶nce bu tampon bellekte toplanÄ±r, sonra iÅŸlenir ya da gÃ¶nderilir.

// Daha Basit TanÄ±mla:
// Bir buffer, verilerin geÃ§ici olarak beklediÄŸi bir araÂ durakÂ gibidir.
// Ã–zet:
// Buffer (tampon), verilerin geÃ§ici olarak bellekte saklandÄ±ÄŸÄ±, performans ve verimlilik iÃ§in kullanÄ±lanÂ birÂ araÃ§tÄ±r.



// ---

// ## ğŸ“¦ `bufio` Paketindeki Temel YapÄ±lar

// ### 1. **`bufio.Reader`**

// * Veri kaynaklarÄ±ndan (dosya, baÄŸlantÄ± vb.) tamponlu okuma yapar.
// * KÃ¼Ã§Ã¼k kÃ¼Ã§Ã¼k okumalar yerine, belleÄŸe bÃ¼yÃ¼k bir blok alÄ±r, sonra programÄ±n isteÄŸine gÃ¶re parÃ§alar halinde verir.
// * KullanÄ±mÄ±: `bufio.NewReader(r io.Reader) *Reader`

// #### Ã–nemli Metodlar:

// * `Read(p []byte) (n int, err error)` â†’ Verilen byte dilimini doldurur.
// * `ReadByte() (byte, error)` â†’ Tek byte okur.
// * `ReadString(delim byte) (string, error)` â†’ Belirli bir ayraÃ§ karakterine kadar okur.
// * `ReadLine() (line []byte, isPrefix bool, err error)` â†’ SatÄ±r okur.

// #### Ã–rnek:

package main

import (
	"bufio"
	"fmt"
	"os"
)

func main() {
	file, _ := os.Open("ornek.txt")
	defer file.Close()

	reader := bufio.NewReader(file)

	// Ä°lk satÄ±rÄ± oku
	line, _, _ := reader.ReadLine()
	fmt.Println("SatÄ±r:", string(line))

	// Noktaya kadar oku
	str, _ := reader.ReadString('.')
	fmt.Println("Noktaya kadar:", str)
}
```

---

### 2. **`bufio.Writer`**

* Veri kaynaÄŸÄ±na tamponlu yazma yapar.
* Verileri Ã¶nce belleÄŸe yazar, tampon dolunca veya `Flush()` Ã§aÄŸrÄ±lÄ±nca dosyaya/baÄŸlantÄ±ya yazar.
* KullanÄ±mÄ±: `bufio.NewWriter(w io.Writer) *Writer`

#### Ã–nemli Metodlar:

* `Write(p []byte) (n int, err error)` â†’ Byte dilimini yazar.
* `WriteString(s string) (int, error)` â†’ String yazar.
* `WriteByte(c byte) error` â†’ Tek byte yazar.
* `Flush() error` â†’ Tampondaki veriyi hedefe gÃ¶nderir.

#### Ã–rnek:

```go
package main

import (
	"bufio"
	"fmt"
	"os"
)

func main() {
	file, _ := os.Create("cikti.txt")
	defer file.Close()

	writer := bufio.NewWriter(file)

	writer.WriteString("Merhaba bufio!\n")
	writer.WriteString("Bu yazÄ± tamponda bekliyor...\n")

	// EÄŸer Flush() Ã§aÄŸrÄ±lmazsa dosyaya yazÄ±lmayabilir
	writer.Flush()

	fmt.Println("Yazma tamamlandÄ±.")
}
```

---

### 3. **`bufio.Scanner`**

* SatÄ±r satÄ±r veya Ã¶zel kurallarla okuma yapmayÄ± kolaylaÅŸtÄ±rÄ±r.
* KullanÄ±mÄ±: `bufio.NewScanner(r io.Reader) *Scanner`

#### Ã–nemli Metodlar:

* `Scan() bool` â†’ Bir sonraki tokenâ€™Ä± okur (true/false dÃ¶ner).
* `Text() string` â†’ Okunan veriyi string olarak dÃ¶ner.
* `Bytes() []byte` â†’ Okunan veriyi byte dilimi olarak dÃ¶ner.
* `Split(splitFunc SplitFunc)` â†’ AyrÄ±ÅŸtÄ±rma kuralÄ±nÄ± deÄŸiÅŸtirir (Ã¶rn. kelime kelime, satÄ±r satÄ±r).

#### Ã–rnek (satÄ±r satÄ±r okuma):

```go
package main

import (
	"bufio"
	"fmt"
	"os"
)

func main() {
	file, _ := os.Open("ornek.txt")
	defer file.Close()

	scanner := bufio.NewScanner(file)

	for scanner.Scan() {
		fmt.Println("SatÄ±r:", scanner.Text())
	}

	if err := scanner.Err(); err != nil {
		fmt.Println("Hata:", err)
	}
}
```

#### Ã–rnek (kelime kelime okuma):

```go
scanner := bufio.NewScanner(file)
scanner.Split(bufio.ScanWords)

for scanner.Scan() {
    fmt.Println("Kelime:", scanner.Text())
}
```

---

### 4. **`bufio.ReadWriter`**

* Hem `Reader` hem `Writer` Ã¶zelliklerini birleÅŸtirir.
* KullanÄ±mÄ±: `bufio.NewReadWriter(r *Reader, w *Writer) *ReadWriter`

#### Ã–rnek:

```go
package main

import (
	"bufio"
	"fmt"
	"os"
)

func main() {
	file, _ := os.Create("rw.txt")
	defer file.Close()

	rw := bufio.NewReadWriter(bufio.NewReader(file), bufio.NewWriter(file))

	rw.WriteString("Merhaba DÃ¼nya!\n")
	rw.Flush()

	fmt.Println("YazÄ±ldÄ±.")
}
```

---

## ğŸš€ Ã–zet

* **`Reader`** â†’ Okuma (satÄ±r, byte, string)
* **`Writer`** â†’ Yazma (string, byte, buffer ile)
* **`Scanner`** â†’ Daha kolay okuma (satÄ±r satÄ±r, kelime kelime)
* **`ReadWriter`** â†’ Hem okuma hem yazma

---

ğŸ‘‰ Ä°stersen sana **tam bir uygulama** yapayÄ±m: Dosyadan satÄ±r satÄ±r okuyup, her satÄ±rÄ±n baÅŸÄ±na numara ekleyerek yeni bir dosyaya yazan bir program. Ä°ster misin?
