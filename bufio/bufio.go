// Go dilinde bufio paketi, buffered (arabellekli) I/O iÅŸlemleri iÃ§in kullanÄ±lan standart bir pakettir. 
// Bu paket, Ã¶zellikle dosya veya aÄŸdan veri okurken ve yazarken performansÄ± artÄ±rmak iÃ§in kullanÄ±lÄ±r. 
// Bufio paketi, verileri satÄ±r satÄ±r veya belirli bir boyutta okuma/yazma gibi iÅŸlemleri kolaylaÅŸtÄ±rÄ±r.

// ğŸ“¦ bufio Paketinin Temel AmacÄ±:

// I/O iÅŸlemlerinde daha az sistem Ã§aÄŸrÄ±sÄ± (syscall) yapmak.

// KÃ¼Ã§Ã¼k kÃ¼Ã§Ã¼k veri okumak/iÅŸlemek yerine, bÃ¼yÃ¼k bloklar halinde okumak/yazmak.

// Okuma ve yazma iÅŸlemlerinde ek iÅŸlevsellik saÄŸlamak (Ã¶rneÄŸin: satÄ±r satÄ±r okuma, belirli karaktere kadar okuma).

// AÅŸaÄŸÄ±da bufio paketini Ã¶rneklerle aÃ§Ä±klayacaÄŸÄ±m:

// ğŸ“¦ bufio Paketini Kullanmak

// Ã–ncelikle paketi iÃ§eri aktar:

import (
    "bufio"
    "fmt"
    "os"
)

//ğŸ”¹ 1. bufio.NewReader ile Dosyadan SatÄ±r SatÄ±r Okuma

package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    file, err := os.Open("ornek.txt")
    if err != nil {
        fmt.Println("Hata:", err)
        return
    }
    defer file.Close()

    reader := bufio.NewReader(file)

    for {
        line, err := reader.ReadString('\n') // satÄ±r sonuna kadar oku
        if err != nil {
            break
        }
        fmt.Print("Okunan satÄ±r: ", line)
    }
}

// AÃ§Ä±klama:

// bufio.NewReader(file) â†’ Dosya iÃ§in bir buffered reader oluÅŸturur.

// ReadString('\n') â†’ SatÄ±r sonuna kadar okur.


//ğŸ”¹ 2. bufio.NewScanner ile SatÄ±r SatÄ±r Okuma (Kolay Yol)

package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    file, err := os.Open("ornek.txt")
    if err != nil {
        fmt.Println("Hata:", err)
        return
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)

    for scanner.Scan() {
        fmt.Println("SatÄ±r:", scanner.Text())
    }

    if err := scanner.Err(); err != nil {
        fmt.Println("Okuma hatasÄ±:", err)
    }
}
// AÃ§Ä±klama:

// bufio.NewScanner â†’ Dosya iÃ§eriÄŸini satÄ±r satÄ±r okumak iÃ§in pratik bir yoldur.

// scanner.Text() â†’ Okunan satÄ±rÄ±n iÃ§eriÄŸini verir.


//ğŸ”¹ 3. bufio.NewWriter ile Dosyaya Yazma

package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    file, err := os.Create("yaz.txt")
    if err != nil {
        fmt.Println("Hata:", err)
        return
    }
    defer file.Close()

    writer := bufio.NewWriter(file)
    
    _, err = writer.WriteString("Merhaba, DÃ¼nya!\n")
    if err != nil {
        fmt.Println("Yazma hatasÄ±:", err)
        return
    }

    writer.Flush() // bufferâ€™Ä± dosyaya yaz
}
// AÃ§Ä±klama:

// bufio.NewWriter(file) â†’ Buffered writer oluÅŸturur.

// writer.WriteString(...) â†’ Buffer'a yazar.

// writer.Flush() â†’ Bufferâ€™daki verileri dosyaya aktarÄ±r (yoksa yazÄ±lmaz!).


//ğŸ”¹ 4. bufio.Reader.ReadBytes KullanÄ±mÄ±

reader := bufio.NewReader(file)
line, err := reader.ReadBytes('\n')
fmt.Println("SatÄ±r (byte dizisi):", line)

//Bu, satÄ±rÄ± byte dilimi ([]byte) olarak almanÄ± saÄŸlar. Ã–zellikle binary veri ile Ã§alÄ±ÅŸÄ±rken kullanÄ±lÄ±r.


| KullanÄ±m           | AÃ§Ä±klama                                |
| ------------------ | --------------------------------------- |
| `bufio.NewReader`  | Buffered okuma                          |
| `ReadString`       | Belirli bir ayÄ±rÄ±cÄ±ya kadar okur        |
| `ReadBytes`        | Belirli bir ayÄ±rÄ±cÄ±ya kadar byte dizisi |
| `bufio.NewScanner` | SatÄ±r satÄ±r okuma (kolay yol)           |
| `bufio.NewWriter`  | Buffered yazma                          |
| `Flush`            | Yazma iÅŸlemini tamamlar                 |
