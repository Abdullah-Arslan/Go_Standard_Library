/*
Goâ€™da **`net/http/cgi` paketi**, **CGI (Common Gateway Interface)** protokolÃ¼nÃ¼ kullanarak web uygulamalarÄ± Ã§alÄ±ÅŸtÄ±rmanÄ± saÄŸlar.

Normalde **`net/http`** paketi ile Go doÄŸrudan HTTP sunucusu aÃ§ar.
Ama **`http/cgi`** ile Go programÄ±, **bir web sunucusunun (Apache, Nginx, IIS vs.) CGI modÃ¼lÃ¼ Ã¼zerinden Ã§aÄŸrÄ±labilir hale gelir.**

---

# ğŸ“¦ `net/http/cgi` Paketi â€“ KapsamlÄ± AÃ§Ä±klama

## ğŸ”¹ Temel AmaÃ§

* CGI ortam deÄŸiÅŸkenlerini (`REQUEST_METHOD`, `QUERY_STRING`, `CONTENT_TYPE`, vs.) okuyarak **HTTP isteklerini `http.Request` nesnesine dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r**.
* ProgramÄ±n Ã§Ä±ktÄ±sÄ±nÄ± **HTTP cevabÄ± olarak web sunucusuna geri gÃ¶nderir**.

Bu sayede, Go ile yazdÄ±ÄŸÄ±n program **CGI script** gibi Ã§alÄ±ÅŸÄ±r.

---

## ğŸ”¹ Ã–nemli Tipler ve Fonksiyonlar

### 1. `cgi.Handler`

* Bir CGI Ã§alÄ±ÅŸtÄ±rÄ±cÄ±sÄ±dÄ±r.
* `net/http.Handler` arayÃ¼zÃ¼nÃ¼ uygular.
*/
``go
type Handler struct {
    Path string   // Ã‡alÄ±ÅŸtÄ±rÄ±lacak CGI binary yolu
    Dir  string   // Ã‡alÄ±ÅŸtÄ±rma klasÃ¶rÃ¼
    Env  []string // Ekstra environment deÄŸiÅŸkenleri
    Args []string // Ekstra argÃ¼manlar
    InheritEnv []string // Ortamdan aktarÄ±lacak env deÄŸiÅŸkenleri
}
``
/*
---

### 2. `(*Handler) ServeHTTP`

* `http.Handler` gibi Ã§alÄ±ÅŸÄ±r, HTTP isteÄŸini alÄ±r, CGI programÄ±nÄ± Ã§alÄ±ÅŸtÄ±rÄ±r.

**Ã–rnek:**
*/
``go
package main

import (
    "net/http"
    "net/http/cgi"
)

func main() {
    handler := &cgi.Handler{
        Path: "/usr/lib/cgi-bin/test.cgi", // Ã§alÄ±ÅŸtÄ±rÄ±lacak script
        Dir:  "/usr/lib/cgi-bin",          // Ã§alÄ±ÅŸma dizini
    }

    http.Handle("/cgi-bin/", handler)
    http.ListenAndServe(":8080", nil)
}
``
/*
Burada:

* `/cgi-bin/` isteÄŸi geldiÄŸinde Go, `test.cgi` dosyasÄ±nÄ± Ã§alÄ±ÅŸtÄ±rÄ±r.
* CGI Ã§Ä±ktÄ±sÄ± HTTP response olarak gÃ¶nderilir.

---

### 3. `cgi.Request()`

* Ortam deÄŸiÅŸkenlerinden (`os.Environ`) ve stdinâ€™den gelen veriden bir `*http.Request` Ã¼retir.
* CGI uyumlu Ã§alÄ±ÅŸmak iÃ§in kullanÄ±lÄ±r.

**Ã–rnek:**
*/
``go
package main

import (
    "fmt"
    "net/http/cgi"
)

func main() {
    r, err := cgi.Request()
    if err != nil {
        panic(err)
    }

    fmt.Println("Method:", r.Method)
    fmt.Println("Path:", r.URL.Path)
}
``
/*
ğŸ‘‰ Bu kod, CGI ortamÄ±nda Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda isteÄŸi doÄŸru ÅŸekilde alÄ±r.

---

### 4. `cgi.Serve(handler http.Handler)`

* KolaylÄ±k fonksiyonu:

  * `cgi.Request()` ile `*http.Request` oluÅŸturur.
  * Belirtilen `handler`â€™a iletir.
  * Ã‡Ä±ktÄ±yÄ± CGI uyumlu ÅŸekilde stdoutâ€™a yazar.

**Ã–rnek:**
*/
``go
package main

import (
    "fmt"
    "net/http"
    "net/http/cgi"
)

func main() {
    handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintln(w, "Merhaba CGI DÃ¼nya!")
    })

    cgi.Serve(handler)
}
``
/*
Bu program CGI olarak Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda, **web sunucusundan gelen istek** `handler` fonksiyonuna aktarÄ±lÄ±r ve yanÄ±t stdout Ã¼zerinden sunucuya dÃ¶ner.

---

## ğŸ”¹ CGI Ã‡alÄ±ÅŸma MantÄ±ÄŸÄ±

1. Web sunucusu (Ã¶r. Apache) bir CGI programÄ± Ã§aÄŸÄ±rÄ±r.
2. CGI ortam deÄŸiÅŸkenlerini (`REQUEST_METHOD`, `QUERY_STRING`, vb.) ayarlar.
3. HTTP isteÄŸinin bodyâ€™sini stdin Ã¼zerinden CGI programÄ±na yollar.
4. CGI programÄ± (Go kodun) `cgi.Request()` ile isteÄŸi okur.
5. `http.ResponseWriter` ile yazÄ±lan her ÅŸey stdoutâ€™a basÄ±lÄ±r.
6. Web sunucusu stdoutâ€™u alÄ±r ve istemciye HTTP cevabÄ± olarak yollar.

---

## ğŸ”¹ GerÃ§ekÃ§i Ã–rnek â€“ Form CGI
*/
``go
package main

import (
    "fmt"
    "net/http"
    "net/http/cgi"
)

func main() {
    handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        r.ParseForm()
        name := r.FormValue("name")
        if name == "" {
            fmt.Fprintln(w, "Merhaba ZiyaretÃ§i!")
        } else {
            fmt.Fprintf(w, "Merhaba %s!\n", name)
        }
    })

    cgi.Serve(handler)
}
``
/*
ğŸ“Œ Bu CGI programÄ±:

* `http://example.com/cgi-bin/hello?name=Ahmet` isteÄŸinde â†’
*/

``
Merhaba Ahmet!
``
/*
---

## ğŸ”¹ Ã–zet

* `net/http/cgi` paketi, Go programlarÄ±nÄ± **CGI script** gibi Ã§alÄ±ÅŸtÄ±rmaya yarar.
* Ana bileÅŸenler:

  * **`cgi.Handler`** â†’ CGI script Ã§aÄŸÄ±rÄ±r (proxy gibi).
  * **`cgi.Request`** â†’ CGI ortamÄ±ndan `http.Request` oluÅŸturur.
  * **`cgi.Serve`** â†’ HTTP handlerâ€™Ä± CGI uyumlu ÅŸekilde Ã§alÄ±ÅŸtÄ±rÄ±r.
* KullanÄ±m senaryosu: **Apache/Nginx altÄ±nda CGI uyumlu Go uygulamalarÄ± Ã§alÄ±ÅŸtÄ±rmak**.

---

ğŸ‘‰ Ä°stersen ben sana bunun da **PDF + Excel tablo (fonksiyonlar + Ã¶rnekler)** formatÄ±nÄ± hazÄ±rlayabilirim.
BÃ¶ylece `http/cgi` paketini de offline kaynak olarak saklayabilirsin. Ä°stiyor musun?
EVET
*/